---
# Test run with https://www.npmjs.com/package/@parity/parachains-integration-tests
settings:
  chains:
    relay_chain: &relay_chain
      wsPort: 9800
    statemint_parachain: &stmt_parachain
      wsPort: 9810
      paraId: &stmt_id 1000
    watr_parachain: &watr_parachain
      wsPort: 9820
      paraId: &watr_id 2000
  variables:
    common:
      require_weight_at_most: &weight_at_most 1000000000
    chains:
      relay_chain:
        sudo:
          signer: &rc_sudo_signer //Alice
        destinations:
          statemint: &rc->stmt_dest { v1: { 0, interior: { x1: { parachain: *stmt_id }}}}
      statemint_parachain:
        asset_ower:
          signer: &stmt_asset_owner_signer //Alice
          wallet: &stmt_asset_owner_wallet HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F # Alice Statmine
        asset_sender:
          signer: &stmt_asset_sender_signer //Bob
          wallet: &stmt_asset_sender_wallet FoQJpPyadYccjavVdTWxpxU7rUEaYhfLCPwXgkfD6Zat9QP # Bob Statmine
        asset:
          id: &stmt_asset_id 1984 # Tether USD
          name: &stmt_asset_name Tether USD
          symbol: &stmt_asset_symbol USDt
          isSufficient: &stmt_asset_is_sufficient true
          decimals: &stmt_asset_decimals 6
          min_balance: &stmt_asset_ed 1000
          pallet_id: &stmt_assets_pallet_id 50
          total_issuance: &stmt_asset_total_issuance 1000000000000000
          amount_to_send: &stmt_asset_amount_to_send 500000000000000 # half of total issuance
          local_locations: &stmt_local_asset_location {
            parents: 0,
            interior: {
              X2: [
                {  PalletInstance: *stmt_assets_pallet_id },
                { GeneralIndex: *stmt_asset_id }
              ]
            }
          }
        destinations:
          watr: &stmt->watr_dest { v1: { parents: 1, interior: { x1: { parachain: *watr_id } }}}
      watr_parachain:
        sovereign_account: &watr_sovereign_sibl FBeL7EAeUroLWXW1yfKboiqTqVfbRBcsUKd6QqVf4kGBySS # Statemine
        asset_receiver:
          account: &watr_asset_receiver_acc '0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48' # Bob
          wallet: &watr_asset_receiver_wallet 2xBchgbq7aQyGjTotgQvP9Uh76uEWfQWYBpAzJgn5dfsfhsW # Bob
        asset:
          id: &watr_asset_id 1984 # Tether USD
        fees: &watr_expected_fees 320000
  decodedCalls:
    force_create_asset:
      chain: *stmt_parachain
      pallet: assets
      call: forceCreate
      args: [
        *stmt_asset_id,
        { Id: *stmt_asset_owner_wallet }, # owner
        *stmt_asset_is_sufficient, # isSufficient
        *stmt_asset_ed # minBalance
      ]

tests:
  - name: RESERVE TRANSFER
    describes:
      - name: polkadotXcm.limitedReserveTransferAssets (Asset) | Statemine Parachain -> Watr Parachain
        before:
          - name: DEPENDANCY | An Asset should exist in the Statemine Parachain
            actions:
              - extrinsics:
                - chain: *relay_chain
                  signer: *rc_sudo_signer
                  sudo: true
                  pallet: xcmPallet
                  call: send
                  args: [
                    *rc->stmt_dest, # destination
                    {
                      v2: [ #message
                        {
                          Transact: {
                            originType: Superuser,
                            requireWeightAtMost: *weight_at_most,
                            call: $force_create_asset
                          }
                        }
                      ]
                    }
                  ]
                  events:
                    - name: xcmPallet.Sent
                    - name: dmpQueue.ExecutedDownward
                      chain: *stmt_parachain
                    - name: assets.ForceCreated
                      chain: *stmt_parachain

          - name: DEPENDANCY | Set metadata
            actions:
              - extrinsics:
                - chain: *stmt_parachain
                  signer: *stmt_asset_owner_signer
                  pallet: assets
                  call: setMetadata
                  args: [
                    *stmt_asset_id, # id
                    *stmt_asset_name, # name
                    *stmt_asset_symbol, # symbol
                    *stmt_asset_decimals # decimals
                  ]
                  events:
                    - name: assets.MetadataSet

          - name: DEPENDANCY | Some Assets should be minted for the sender
            actions:
              - extrinsics:
                - chain: *stmt_parachain
                  signer: *stmt_asset_owner_signer
                  pallet: assets
                  call: mint
                  args: [
                    *stmt_asset_id,
                    *stmt_asset_sender_wallet,
                    *stmt_asset_total_issuance
                  ]
                  events:
                    - name: assets.Issued

        its:
          - name: Statemine Parachain account should be able to reserve transfer Asset to another account in Watr Parachain
            actions:
              - extrinsics:
                - chain: *stmt_parachain
                  signer: *stmt_asset_sender_signer
                  pallet: polkadotXcm
                  call: limitedReserveTransferAssets
                  args: [
                    *stmt->watr_dest, # destination
                    { # beneficiary
                      V1: {
                        parents: 0,
                        interior: {
                          X1: {
                            AccountId32: {
                              network: Any,
                              id: *watr_asset_receiver_acc
                            }
                          }
                        }
                      }
                    },
                    { # assets
                      V1: [
                        {
                          id: {
                            Concrete: *stmt_local_asset_location
                          },
                          fun: {
                            Fungible: *stmt_asset_amount_to_send
                          }
                        }
                      ]
                    },
                    0, # feeAssetItem
                    Unlimited # weightLimit
                  ]
                  events:
                    - name: polkadotXcm.Attempted
                      attributes:
                        - type: XcmV2TraitsOutcome
                          xcmOutcome: Complete
                          threshold: [10, 10]
                          value: 654,404,000
                    - name: assets.Transferred
                      result: {
                          assetId:  *stmt_asset_id,
                          from: *stmt_asset_sender_wallet,
                          to: *watr_sovereign_sibl,
                          amount: *stmt_asset_amount_to_send
                        }
                    - name: xcmpQueue.Success
                      chain: *watr_parachain
                    - name: assets.Issued
                      chain: *watr_parachain
                      attributes:
                        - key: assetId
                          value: *watr_asset_id
                        - key: owner
                          value: *watr_asset_receiver_wallet
                        - key: totalSupply
                          value: *stmt_asset_amount_to_send
                          threshold: [ 10, 0 ] # less fees
                    - name: assets.Issued
                      chain: *watr_parachain
                      attributes:
                        - key: assetId
                          value: *watr_asset_id
                        - key: totalSupply
                          value: *watr_expected_fees # fees
