// Copyright 2023 Watr Foundation
// This file is part of Watr.

// Watr is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Watr is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Watr.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_did`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-03, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("devnet-dev"), DB CACHE: 1024

// Executed Command:
// target/release/watr-node
// benchmark
// pallet
// --chain=devnet-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_did
// --extrinsic=*
// --steps=50
// --repeat=20
// --json
// --header=./file_header.txt
// --output=./runtime/devnet/src/weights/pallet_did.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_did`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_did::WeightInfo for WeightInfo<T> {
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn create_did(m: u32, ) -> Weight {
		Weight::from_ref_time(64_000_000 as u64)
			// Standard Error: 18_860
			.saturating_add(Weight::from_ref_time(6_586_772 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Services (r:10 w:10)
	/// The range of component `m` is `[0, 10]`.
	/// The range of component `n` is `[0, 10]`.
	fn update_did(m: u32, n: u32, ) -> Weight {
		Weight::from_ref_time(107_000_000 as u64)
			// Standard Error: 59_175
			.saturating_add(Weight::from_ref_time(2_435_625 as u64).saturating_mul(m as u64))
			// Standard Error: 59_175
			.saturating_add(Weight::from_ref_time(2_069_409 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(11 as u64))
	}
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Issuers (r:1 w:0)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn remove_did(m: u32, ) -> Weight {
		Weight::from_ref_time(69_000_000 as u64)
			// Standard Error: 18_341
			.saturating_add(Weight::from_ref_time(6_395_706 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn add_did_services(m: u32, ) -> Weight {
		Weight::from_ref_time(42_000_000 as u64)
			// Standard Error: 18_570
			.saturating_add(Weight::from_ref_time(6_718_767 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn remove_did_services(m: u32, ) -> Weight {
		Weight::from_ref_time(42_000_000 as u64)
			// Standard Error: 16_663
			.saturating_add(Weight::from_ref_time(6_631_094 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
}
