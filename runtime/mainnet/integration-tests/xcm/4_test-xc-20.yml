---
settings:
  chains:
    watr_parachain: &watr_parachain
      wsPort: 9821
  variables:
    chains:
      watr_parachain:
        networkName: &watr_network_name 'watr-mainnet'
        rpcPort: &watr_rpc_port 8833
        amount: &watr_amount_to_transfer '100000000000000000000' # 100 WTRD
        asset_ower:
          signer: &watr_asset_owner_signer //Alice
          wallet: &watr_asset_owner_wallet 2ykmykmyFJQsRjxKKcNs8VPfCwv7yCor31xW3fpT9cb7SYuS # Alice
        asset_funder:
          signer: &watr_asset_funder_signer //Bob
        eth_asset_sender:
          wallet: &watr_asset_sender_wallet 2z4S7fY4hioG8wJ9Q9V4WPUPsdWu2cwYCp9QB7N9s1BRstvm # Corresponds to wallet_eth
          wallet_eth: &watr_asset_sender_wallet_eth '0xe31B11A052aFC923259949352B2f573a21301Ba4'
          wallet_eth_priv_key: &watr_asset_sender_wallet_eth_priv_key '0x05306c74d0514acf0d2a02049c31284c17c9200270df88eda11f4421cd04742a'
        asset_receiver:
          wallet: &watr_asset_receiver_wallet 2zXaVmcdqbL7XdDQxLkUnAmFqqhV6NNVQEw2fAyBBJJ9A8Mp # Corresponds to wallet_eth
          wallet_eth: &watr_asset_receiver_wallet_eth '0x90b5ab205c6974c9ea841be688864633dc9ca8a3'
        asset:
          id: &watr_asset_id 1984 # Tether USD
          name: &watr_asset_name Tether USD
          symbol: &watr_asset_symbol USDT
          isSufficient: &watr_asset_is_sufficient true
          decimals: &watr_asset_decimals 12
          min_balance: &watr_asset_ed 1000
          amount: &amount_to_mint 100000000000000 # 100 Assets
          total_supply: &watr_asset_total_supply 450000000000000 
          amount_to_transfer: &amount_to_transfer 1000000000000 # 1 asset
          isFrozen: &watr_asset_is_frozen false
      ethereum:
        chainId: &eth_chain_id 688
        contract:
          xc_20_foreign: &xc_20_foreign_precompile_addr '0xFFFFFFFF000000000000000000000000000007C0'
          xc_20_mintable: '0xFFFFFFFE000000000000000000000000000007C0'

tests:
  - name: TEST XC-20
    before:
      - name: DEPENDANCY | Fund with some native asset the Ethereum signer account to pay the fees for transfering the Assets
        actions:
          - extrinsics:
              - chain: *watr_parachain
                signer: *watr_asset_owner_signer
                pallet: balances
                call: transfer
                args: [
                  *watr_asset_sender_wallet,
                  *watr_amount_to_transfer
                ]
                events:
                  - name: balances.Transfer

      - name: DEPENDANCY | Fund with some native asset the Existential Deposit for the Ethereum receiver account  
        actions:
          - extrinsics:
              - chain: *watr_parachain
                signer: *watr_asset_owner_signer
                pallet: balances
                call: transfer
                args: [
                  *watr_asset_receiver_wallet,
                  *watr_amount_to_transfer
                ]
                events:
                  - name: balances.Transfer

      - name: DEPENDANCY | Fund with some Assets the Substrate account of the Ethereum signer
        actions:
          - extrinsics:
            - chain: *watr_parachain
              signer: *watr_asset_owner_signer
              pallet: assets
              call: mint
              args: [
                *watr_asset_id,
                *watr_asset_sender_wallet,
                *amount_to_mint
              ]
              events:
                - name: assets.Issued

      - name: DEPENDANCY | Make the Eth signer's Substrate account the owner of the asset
        actions:
          - extrinsics:
            - chain: *watr_parachain
              signer: *watr_asset_owner_signer
              pallet: assets
              call: forceAssetStatus
              sudo: true
              args: [
                *watr_asset_id,
                *watr_asset_sender_wallet, # owner
                *watr_asset_sender_wallet, # issuer
                *watr_asset_sender_wallet, # admin
                *watr_asset_sender_wallet, # freezer
                *watr_asset_ed, # minBalance
                *watr_asset_is_sufficient, # isSufficient
                *watr_asset_is_frozen # isFrozen
              ]
              events:
                - name: assets.AssetStatusChanged
    describes:
      - name: Read XC-20 metadata
        its:
          - name: Should read metadata for xc-20 asset 
            actions:
            - customs:
              - path: ../customs/read-xc20-custom.ts
                args: [
                  {
                   networkName: *watr_network_name,
                   rpcPort: *watr_rpc_port,
                   chainId: *eth_chain_id,
                   senderPrivKey: *watr_asset_sender_wallet_eth_priv_key,
                   xc20PrecompileAddress: *xc_20_foreign_precompile_addr 
                  },
                  {
                    balanceOfAddr: *watr_asset_receiver_wallet_eth
                  }
                ]
            - asserts:
                equal:
                  args: [
                    $asset_metadata,
                    {
                      name: *watr_asset_name,
                      symbol: *watr_asset_symbol,
                      totalSupply: *watr_asset_total_supply,
                      balanceOf: 0,
                    }
                  ]
      - name: Transfer XC-20 assets 
        its:
          - name: Should transfer assets
            actions:
            - customs:
              - path: ../customs/transfer-xc20-custom.ts
                args: [
                  {
                   networkName: *watr_network_name,
                   rpcPort: *watr_rpc_port,
                   chainId: *eth_chain_id,
                   senderPrivKey: *watr_asset_sender_wallet_eth_priv_key,
                   xc20PrecompileAddress: *xc_20_foreign_precompile_addr 
                  },
                  {
                    amount: *amount_to_transfer,
                    to: *watr_asset_receiver_wallet_eth
                  },
                ]
              # - events:
              #   - name: assets.Transferred
              #     attributes:
              #       - key: assetId
              #         value: 1984
              #       - key: from
              #         value: 2z4S7fY4hioG8wJ9Q9V4WPUPsdWu2cwYCp9QB7N9s1BRstvm
              #       - key: to
              #         value: 2zXaVmcdqbL7XdDQxLkUnAmFqqhV6NNVQEw2fAyBBJJ9A8Mp
              #       - key: amount
              #         value: *amount_to_transfer
              #   - name: evm.Log
              #   - name: ethereum.Executed
          - name: Should read metadata for xc-20 asset after transfer
            actions:
            - customs:
              - path: ../customs/read-xc20-custom.ts
                args: [
                  {
                   networkName: *watr_network_name,
                   rpcPort: *watr_rpc_port,
                   chainId: *eth_chain_id,
                   senderPrivKey: *watr_asset_sender_wallet_eth_priv_key,
                   xc20PrecompileAddress: *xc_20_foreign_precompile_addr 
                  },
                  {
                    balanceOfAddr: *watr_asset_receiver_wallet_eth
                  }
                ]
            - asserts:
                equal:
                  args: [
                    $asset_metadata,
                    {
                      name: *watr_asset_name,
                      symbol: *watr_asset_symbol,
                      totalSupply: *watr_asset_total_supply,
                      balanceOf: *amount_to_transfer,
                    }
                  ]