---
# Test run with https://www.npmjs.com/package/@parity/parachains-integration-tests
settings:
  chains:
    relay_chain: &relay_chain
      wsPort: 9800
    statemint_parachain: &stmt_parachain
      wsPort: 9810
      paraId: &stmt_id 1000
    watr_parachain: &watr_parachain
      wsPort: 9820
      paraId: &watr_id 2058
  variables:
    common:
      require_weight_at_most:
        &weight_at_most { refTime: 1000000000, proofSize: 200000 }
      weight_threshold:
        &weight_threshold { refTime: [10, 10], proofSize: [10, 10] }
    chains:
      relay_chain:
        sudo:
          signer: &rc_sudo_signer //Alice
        destinations:
          statemint:
            &rc->stmt_dest {
              v3: { 0, interior: { x1: { parachain: *stmt_id } } },
            }
      statemint_parachain:
        asset_ower:
          signer: &stmt_asset_owner_signer //Alice
          wallet: &stmt_asset_owner_wallet HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F # Alice Statmine
        asset_sender:
          signer: &stmt_asset_sender_signer //Bob
          wallet: &stmt_asset_sender_wallet FoQJpPyadYccjavVdTWxpxU7rUEaYhfLCPwXgkfD6Zat9QP # Bob Statmine
        asset:
          id: &stmt_asset_id 1984 # Tether USD
          wrong_id: &stmt_wrong_asset_id 1985
          name: &stmt_asset_name Tether USD
          symbol: &stmt_asset_symbol USDt
          isSufficient: &stmt_asset_is_sufficient true
          decimals: &stmt_asset_decimals 6
          min_balance: &stmt_asset_ed 1000
          pallet_id: &stmt_assets_pallet_id 50
          total_issuance: &stmt_asset_total_issuance 1000000000000000
          amount_to_send: &stmt_asset_amount_to_send 500000000000000 # half of total issuance
          local_locations:
            &stmt_local_asset_location {
              parents: 0,
              interior:
                {
                  X2:
                    [
                      { PalletInstance: *stmt_assets_pallet_id },
                      { GeneralIndex: *stmt_asset_id },
                    ],
                },
            }
          wrong_local_locations:
            &stmt_wrong_local_asset_location {
              parents: 0,
              interior:
                {
                  X2:
                    [
                      { PalletInstance: *stmt_assets_pallet_id },
                      { GeneralIndex: *stmt_wrong_asset_id },
                    ],
                },
            }
        destinations:
          watr:
            &stmt->watr_dest {
              v3: { parents: 1, interior: { x1: { parachain: *watr_id } } },
            }
      watr_parachain:
        sovereign_account: &watr_sovereign_sibl FBeL7DUySdc1yfT9KfucQTJm4UByTW8T5X2mSQjVA8tstTf # Statemine
        asset_receiver:
          account: &watr_asset_receiver_acc "0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48" # Bob
          wallet: &watr_asset_receiver_wallet 2xBchgbq7aQyGjTotgQvP9Uh76uEWfQWYBpAzJgn5dfsfhsW # Bob
        asset:
          id: &watr_asset_id 1984 # Tether USD
        fees: &watr_expected_fees 32000
  decodedCalls:
    force_create_asset:
      chain: *stmt_parachain
      pallet: assets
      call: forceCreate
      args: [
          *stmt_asset_id,
          { Id: *stmt_asset_owner_wallet }, # owner
          *stmt_asset_is_sufficient, # isSufficient
          *stmt_asset_ed, # minBalance
        ]
    force_create_wrong_asset:
      chain: *stmt_parachain
      pallet: assets
      call: forceCreate
      args: [
          *stmt_wrong_asset_id,
          { Id: *stmt_asset_owner_wallet }, # owner
          *stmt_asset_is_sufficient, # isSufficient
          *stmt_asset_ed, # minBalance
        ]

tests:
  - name: RESERVE TRANSFER
    describes:
      - name: polkadotXcm.limitedReserveTransferAssets (Asset) | Statemine Parachain -> Watr Parachain
        before:
          - name: DEPENDENCY | An Asset should exist in the Statemine Parachain
            actions:
              - extrinsics:
                  - chain: *relay_chain
                    signer: *rc_sudo_signer
                    sudo: true
                    pallet: xcmPallet
                    call: send
                    args: [
                        *rc->stmt_dest, # destination
                        { ? v3 #message
                          : [
                              { UnpaidExecution: { weightLimit: Unlimited } },
                              {
                                SetTopic: "0x0123456789012345678901234567891201234567890123456789012345678912",
                              },
                              {
                                Transact:
                                  {
                                    originKind: Superuser,
                                    requireWeightAtMost: *weight_at_most,
                                    call: $force_create_asset,
                                  },
                              },
                            ] },
                      ]
                    events:
                      - name: xcmPallet.Sent
                      - name: dmpQueue.ExecutedDownward
                        chain: *stmt_parachain
                        threshold: *weight_threshold
                        result:
                          {
                            outcome:
                              {
                                Complete:
                                  {
                                    refTime: "1,022,394,000",
                                    proofSize: "200,000",
                                  },
                              },
                          }
              - queries:
                  forced_created_asset:
                    chain: *stmt_parachain
                    pallet: assets
                    call: asset
                    args: [*stmt_asset_id]
              - asserts:
                  isSome:
                    args: [$forced_created_asset]

          - name: DEPENDENCY | A wrong Asset should exist in the Statemine Parachain
            actions:
              - extrinsics:
                  - chain: *relay_chain
                    signer: *rc_sudo_signer
                    sudo: true
                    pallet: xcmPallet
                    call: send
                    args: [
                        *rc->stmt_dest, # destination
                        { ? v3 #message
                          : [
                              { UnpaidExecution: { weightLimit: Unlimited } },
                              {
                                SetTopic: "0x0123456789012345678901234567891201234567890123456789012345678912",
                              },
                              {
                                Transact:
                                  {
                                    originKind: Superuser,
                                    requireWeightAtMost: *weight_at_most,
                                    call: $force_create_wrong_asset,
                                  },
                              },
                            ] },
                      ]
                    events:
                      - name: xcmPallet.Sent
                      - name: dmpQueue.ExecutedDownward
                        chain: *stmt_parachain
                        threshold: *weight_threshold
                        result:
                          {
                            outcome:
                              {
                                Complete:
                                  {
                                    refTime: "1,022,394,000",
                                    proofSize: "200,000",
                                  },
                              },
                          }
              - queries:
                  forced_created_wrong_asset:
                    chain: *stmt_parachain
                    pallet: assets
                    call: asset
                    args: [*stmt_wrong_asset_id]
              - asserts:
                  isSome:
                    args: [$forced_created_wrong_asset]

          - name: DEPENDENCY | Set metadata
            actions:
              - extrinsics:
                  - chain: *stmt_parachain
                    signer: *stmt_asset_owner_signer
                    pallet: assets
                    call: setMetadata
                    args: [
                        *stmt_asset_id, # id
                        *stmt_asset_name, # name
                        *stmt_asset_symbol, # symbol
                        *stmt_asset_decimals, # decimals
                      ]
                    events:
                      - name: assets.MetadataSet

          - name: DEPENDENCY | Some Assets should be minted for the sender
            actions:
              - extrinsics:
                  - chain: *stmt_parachain
                    signer: *stmt_asset_owner_signer
                    pallet: assets
                    call: mint
                    args:
                      [
                        *stmt_asset_id,
                        *stmt_asset_sender_wallet,
                        *stmt_asset_total_issuance,
                      ]
                    events:
                      - name: assets.Issued

          - name: DEPENDENCY | Some wrong Assets should be minted for the sender
            actions:
              - extrinsics:
                  - chain: *stmt_parachain
                    signer: *stmt_asset_owner_signer
                    pallet: assets
                    call: mint
                    args:
                      [
                        *stmt_wrong_asset_id,
                        *stmt_asset_sender_wallet,
                        *stmt_asset_total_issuance,
                      ]
                    events:
                      - name: assets.Issued

        its:
          - name: Statemine Parachain account should be able to reserve transfer Asset to another account in Watr Parachain
            actions:
              - extrinsics:
                  - chain: *stmt_parachain
                    signer: *stmt_asset_sender_signer
                    pallet: polkadotXcm
                    call: limitedReserveTransferAssets
                    args: [
                        *stmt->watr_dest, # destination
                        {
                          # beneficiary
                          v3:
                            {
                              parents: 0,
                              interior:
                                {
                                  X1:
                                    {
                                      AccountId32:
                                        { id: *watr_asset_receiver_acc },
                                    },
                                },
                            },
                        },
                        {
                          # assets
                          v3:
                            [
                              {
                                id: { Concrete: *stmt_local_asset_location },
                                fun: { Fungible: *stmt_asset_amount_to_send },
                              },
                            ],
                        },
                        0, # feeAssetItem
                        Unlimited, # weightLimit
                      ]
                    events:
                      - name: polkadotXcm.Attempted
                        attributes:
                          - type: XcmV3TraitsOutcome
                            xcmOutcome: Complete
                            threshold: *weight_threshold
                            value:
                              [
                                {
                                  Complete:
                                    {
                                      refTime: "679,150,000",
                                      proofSize: "6,196",
                                    },
                                },
                              ]
                      - name: assets.Transferred
                        result:
                          {
                            assetId: *stmt_asset_id,
                            from: *stmt_asset_sender_wallet,
                            to: *watr_sovereign_sibl,
                            amount: *stmt_asset_amount_to_send,
                          }
                      - name: xcmpQueue.Success
                        chain: *watr_parachain

          - name: Watr Parachain should reject an unknown Asset sent from Statemine
            actions:
              - extrinsics:
                  - chain: *stmt_parachain
                    signer: *stmt_asset_sender_signer
                    pallet: polkadotXcm
                    call: limitedReserveTransferAssets
                    args: [
                        *stmt->watr_dest, # destination
                        {
                          # beneficiary
                          v3:
                            {
                              parents: 0,
                              interior:
                                {
                                  X1:
                                    {
                                      AccountId32:
                                        {
                                          network,
                                          id: *watr_asset_receiver_acc,
                                        },
                                    },
                                },
                            },
                        },
                        {
                          # assets
                          v3:
                            [
                              {
                                id:
                                  {
                                    Concrete: *stmt_wrong_local_asset_location,
                                  },
                                fun: { Fungible: *stmt_asset_amount_to_send },
                              },
                            ],
                        },
                        0, # feeAssetItem
                        Unlimited, # weightLimit
                      ]
                    events:
                      - name: polkadotXcm.Attempted
                        attributes:
                          - type: XcmV3TraitsOutcome
                            xcmOutcome: Complete
                            threshold: *weight_threshold
                            value:
                              [
                                {
                                  Complete:
                                    {
                                      refTime: "679,150,000",
                                      proofSize: "6,196",
                                    },
                                },
                              ]
                      - name: assets.Transferred
                        result:
                          {
                            assetId: *stmt_wrong_asset_id,
                            from: *stmt_asset_sender_wallet,
                            to: *watr_sovereign_sibl,
                            amount: *stmt_asset_amount_to_send,
                          }
                      - name: xcmpQueue.Fail
                        chain: *watr_parachain
                        attributes:
                          - type: XcmV3TraitsError
                            value: Barrier
