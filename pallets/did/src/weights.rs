// Copyright 2023 Watr Foundation
// This file is part of Watr.

// Watr is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Watr is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Watr.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_did
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `PAR03610`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("devnet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/watr-node
// benchmark
// pallet
// --chain=devnet-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_did
// --extrinsic=*
// --steps=50
// --repeat=20
// --heap-pages=4096
// --output=./pallets/did/src/weights.rs
// --header=./file_header.txt
// --template=./scripts/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_did.
pub trait WeightInfo {
	fn create_did(m: u32, ) -> Weight;
	fn update_did() -> Weight;
	fn remove_did(m: u32, ) -> Weight;
	fn add_did_services(m: u32, ) -> Weight;
	fn remove_did_services(m: u32, ) -> Weight;
	fn issue_credentials(c: u32, ) -> Weight;
	fn revoke_credentials(c: u32, ) -> Weight;
	fn add_issuer() -> Weight;
	fn revoke_issuer() -> Weight;
	fn reactivate_issuer() -> Weight;
	fn add_credentials_type(m: u32, ) -> Weight;
	fn remove_credentials_type(m: u32, ) -> Weight;
}

/// Weights for pallet_did using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Issuers (r:1 w:0)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn create_did(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(25_000_000 as u64)
			// Standard Error: 3_676
			.saturating_add(Weight::from_ref_time(3_148_545 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:1 w:1)
	fn update_did() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(16_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Issuers (r:1 w:0)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn remove_did(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(26_000_000 as u64)
			// Standard Error: 3_906
			.saturating_add(Weight::from_ref_time(2_736_703 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn add_did_services(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_000_000 as u64)
			// Standard Error: 3_896
			.saturating_add(Weight::from_ref_time(3_232_202 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn remove_did_services(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_000_000 as u64)
			// Standard Error: 4_303
			.saturating_add(Weight::from_ref_time(3_035_872 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:2 w:0)
	// Storage: DID Issuers (r:1 w:0)
	// Storage: DID CredentialsTypes (r:1 w:0)
	// Storage: DID IssuedCredentials (r:1 w:1)
	/// The range of component `c` is `[0, 50]`.
	fn issue_credentials(c: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(21_000_000 as u64)
			// Standard Error: 2_318
			.saturating_add(Weight::from_ref_time(3_982_649 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(c as u64)))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
	// Storage: DID Did (r:1 w:0)
	// Storage: DID IssuedCredentials (r:1 w:1)
	/// The range of component `c` is `[0, 50]`.
	fn revoke_credentials(c: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_000_000 as u64)
			// Standard Error: 2_510
			.saturating_add(Weight::from_ref_time(4_972_552 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(c as u64)))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
	// Storage: DID Did (r:1 w:0)
	// Storage: DID Issuers (r:1 w:1)
	fn add_issuer() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(16_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: DID Issuers (r:1 w:1)
	fn revoke_issuer() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(16_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: DID Issuers (r:1 w:1)
	fn reactivate_issuer() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: DID CredentialsTypes (r:1 w:1)
	/// The range of component `m` is `[0, 50]`.
	fn add_credentials_type(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(12_000_000 as u64)
			// Standard Error: 1_319
			.saturating_add(Weight::from_ref_time(430_221 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: DID CredentialsTypes (r:1 w:1)
	/// The range of component `m` is `[0, 50]`.
	fn remove_credentials_type(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(13_000_000 as u64)
			// Standard Error: 987
			.saturating_add(Weight::from_ref_time(380_293 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Issuers (r:1 w:0)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn create_did(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(25_000_000 as u64)
			// Standard Error: 3_676
			.saturating_add(Weight::from_ref_time(3_148_545 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:1 w:1)
	fn update_did() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(16_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Issuers (r:1 w:0)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn remove_did(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(26_000_000 as u64)
			// Standard Error: 3_906
			.saturating_add(Weight::from_ref_time(2_736_703 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn add_did_services(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_000_000 as u64)
			// Standard Error: 3_896
			.saturating_add(Weight::from_ref_time(3_232_202 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:1 w:1)
	// Storage: DID Services (r:1 w:1)
	/// The range of component `m` is `[0, 10]`.
	fn remove_did_services(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_000_000 as u64)
			// Standard Error: 4_303
			.saturating_add(Weight::from_ref_time(3_035_872 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
	}
	// Storage: DID Did (r:2 w:0)
	// Storage: DID Issuers (r:1 w:0)
	// Storage: DID CredentialsTypes (r:1 w:0)
	// Storage: DID IssuedCredentials (r:1 w:1)
	/// The range of component `c` is `[0, 50]`.
	fn issue_credentials(c: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(21_000_000 as u64)
			// Standard Error: 2_318
			.saturating_add(Weight::from_ref_time(3_982_649 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(c as u64)))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
	// Storage: DID Did (r:1 w:0)
	// Storage: DID IssuedCredentials (r:1 w:1)
	/// The range of component `c` is `[0, 50]`.
	fn revoke_credentials(c: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_000_000 as u64)
			// Standard Error: 2_510
			.saturating_add(Weight::from_ref_time(4_972_552 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(c as u64)))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
	// Storage: DID Did (r:1 w:0)
	// Storage: DID Issuers (r:1 w:1)
	fn add_issuer() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(16_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: DID Issuers (r:1 w:1)
	fn revoke_issuer() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(16_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: DID Issuers (r:1 w:1)
	fn reactivate_issuer() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: DID CredentialsTypes (r:1 w:1)
	/// The range of component `m` is `[0, 50]`.
	fn add_credentials_type(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(12_000_000 as u64)
			// Standard Error: 1_319
			.saturating_add(Weight::from_ref_time(430_221 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: DID CredentialsTypes (r:1 w:1)
	/// The range of component `m` is `[0, 50]`.
	fn remove_credentials_type(m: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(13_000_000 as u64)
			// Standard Error: 987
			.saturating_add(Weight::from_ref_time(380_293 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
