// Copyright 2023 Watr Foundation
// This file is part of Watr.

// Watr is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Watr is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Watr.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_did
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("devnet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/watr-node
// benchmark
// pallet
// --chain=devnet-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_did
// --extrinsic=*
// --steps=50
// --repeat=20
// --heap-pages=4096
// --output=./pallets/did/src/weights.rs
// --header=./file_header.txt
// --template=./scripts/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_did.
pub trait WeightInfo {
	fn create_did(m: u32, ) -> Weight;
	fn update_did() -> Weight;
	fn remove_did(m: u32, ) -> Weight;
	fn add_did_services(m: u32, ) -> Weight;
	fn remove_did_services(m: u32, ) -> Weight;
	fn issue_credentials(c: u32, ) -> Weight;
	fn revoke_credentials(c: u32, ) -> Weight;
	fn add_issuer() -> Weight;
	fn revoke_issuer() -> Weight;
	fn reactivate_issuer() -> Weight;
	fn add_credentials_type(m: u32, ) -> Weight;
	fn remove_credentials_type(m: u32, ) -> Weight;
}

/// Weights for pallet_did using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: DID Did (r:1 w:1)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID Services (r:10 w:10)
	/// Proof: DID Services (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 10]`.
	fn create_did(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3907 + m * (2630 ±0)`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_443_381, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			// Standard Error: 10_347
			.saturating_add(Weight::from_parts(3_734_207, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2630).saturating_mul(m.into()))
	}
	/// Storage: DID Did (r:1 w:1)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	fn update_did() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `193`
		//  Estimated: `3907`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: DID Did (r:1 w:1)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID Services (r:10 w:10)
	/// Proof: DID Services (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	/// Storage: DID Issuers (r:1 w:0)
	/// Proof: DID Issuers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 10]`.
	fn remove_did(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210 + m * (97 ±0)`
		//  Estimated: `3907 + m * (2630 ±0)`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(26_618_623, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			// Standard Error: 8_291
			.saturating_add(Weight::from_parts(3_312_251, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2630).saturating_mul(m.into()))
	}
	/// Storage: DID Did (r:1 w:1)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID Services (r:10 w:10)
	/// Proof: DID Services (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 10]`.
	fn add_did_services(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `193`
		//  Estimated: `3907 + m * (2630 ±0)`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_149_772, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			// Standard Error: 6_677
			.saturating_add(Weight::from_parts(3_808_899, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2630).saturating_mul(m.into()))
	}
	/// Storage: DID Did (r:1 w:1)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID Services (r:10 w:10)
	/// Proof: DID Services (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 10]`.
	fn remove_did_services(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210 + m * (97 ±0)`
		//  Estimated: `3907 + m * (2630 ±0)`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_837_729, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			// Standard Error: 8_476
			.saturating_add(Weight::from_parts(3_480_590, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2630).saturating_mul(m.into()))
	}
	/// Storage: DID Did (r:2 w:0)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID Issuers (r:1 w:0)
	/// Proof: DID Issuers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DID CredentialsTypes (r:1 w:0)
	/// Proof: DID CredentialsTypes (max_values: Some(1), max_size: Some(1651), added: 2146, mode: MaxEncodedLen)
	/// Storage: DID IssuedCredentials (r:50 w:50)
	/// Proof: DID IssuedCredentials (max_values: None, max_size: Some(659), added: 3134, mode: MaxEncodedLen)
	/// The range of component `c` is `[0, 50]`.
	fn issue_credentials(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `377 + c * (6 ±0)`
		//  Estimated: `6824 + c * (3134 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_180_388, 0)
			.saturating_add(Weight::from_parts(0, 6824))
			// Standard Error: 2_663
			.saturating_add(Weight::from_parts(4_833_099, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3134).saturating_mul(c.into()))
	}
	/// Storage: DID Did (r:1 w:0)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID IssuedCredentials (r:50 w:50)
	/// Proof: DID IssuedCredentials (max_values: None, max_size: Some(659), added: 3134, mode: MaxEncodedLen)
	/// The range of component `c` is `[0, 50]`.
	fn revoke_credentials(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `365 + c * (594 ±0)`
		//  Estimated: `3907 + c * (3134 ±0)`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(13_183_278, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			// Standard Error: 4_448
			.saturating_add(Weight::from_parts(5_919_849, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3134).saturating_mul(c.into()))
	}
	/// Storage: DID Issuers (r:1 w:1)
	/// Proof: DID Issuers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn add_issuer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3514`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3514))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: DID Issuers (r:1 w:1)
	/// Proof: DID Issuers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn revoke_issuer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `117`
		//  Estimated: `3514`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3514))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: DID Issuers (r:1 w:1)
	/// Proof: DID Issuers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn reactivate_issuer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `117`
		//  Estimated: `3514`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3514))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: DID CredentialsTypes (r:1 w:1)
	/// Proof: DID CredentialsTypes (max_values: Some(1), max_size: Some(1651), added: 2146, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 50]`.
	fn add_credentials_type(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3136`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(10_360_273, 0)
			.saturating_add(Weight::from_parts(0, 3136))
			// Standard Error: 1_583
			.saturating_add(Weight::from_parts(520_543, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: DID CredentialsTypes (r:1 w:1)
	/// Proof: DID CredentialsTypes (max_values: Some(1), max_size: Some(1651), added: 2146, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 50]`.
	fn remove_credentials_type(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `70 + m * (6 ±0)`
		//  Estimated: `3136`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_842_469, 0)
			.saturating_add(Weight::from_parts(0, 3136))
			// Standard Error: 1_519
			.saturating_add(Weight::from_parts(459_197, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: DID Did (r:1 w:1)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID Services (r:10 w:10)
	/// Proof: DID Services (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 10]`.
	fn create_did(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3907 + m * (2630 ±0)`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_443_381, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			// Standard Error: 10_347
			.saturating_add(Weight::from_parts(3_734_207, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2630).saturating_mul(m.into()))
	}
	/// Storage: DID Did (r:1 w:1)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	fn update_did() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `193`
		//  Estimated: `3907`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: DID Did (r:1 w:1)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID Services (r:10 w:10)
	/// Proof: DID Services (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	/// Storage: DID Issuers (r:1 w:0)
	/// Proof: DID Issuers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 10]`.
	fn remove_did(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210 + m * (97 ±0)`
		//  Estimated: `3907 + m * (2630 ±0)`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(26_618_623, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			// Standard Error: 8_291
			.saturating_add(Weight::from_parts(3_312_251, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2630).saturating_mul(m.into()))
	}
	/// Storage: DID Did (r:1 w:1)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID Services (r:10 w:10)
	/// Proof: DID Services (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 10]`.
	fn add_did_services(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `193`
		//  Estimated: `3907 + m * (2630 ±0)`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_149_772, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			// Standard Error: 6_677
			.saturating_add(Weight::from_parts(3_808_899, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2630).saturating_mul(m.into()))
	}
	/// Storage: DID Did (r:1 w:1)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID Services (r:10 w:10)
	/// Proof: DID Services (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 10]`.
	fn remove_did_services(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210 + m * (97 ±0)`
		//  Estimated: `3907 + m * (2630 ±0)`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_837_729, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			// Standard Error: 8_476
			.saturating_add(Weight::from_parts(3_480_590, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2630).saturating_mul(m.into()))
	}
	/// Storage: DID Did (r:2 w:0)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID Issuers (r:1 w:0)
	/// Proof: DID Issuers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DID CredentialsTypes (r:1 w:0)
	/// Proof: DID CredentialsTypes (max_values: Some(1), max_size: Some(1651), added: 2146, mode: MaxEncodedLen)
	/// Storage: DID IssuedCredentials (r:50 w:50)
	/// Proof: DID IssuedCredentials (max_values: None, max_size: Some(659), added: 3134, mode: MaxEncodedLen)
	/// The range of component `c` is `[0, 50]`.
	fn issue_credentials(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `377 + c * (6 ±0)`
		//  Estimated: `6824 + c * (3134 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_180_388, 0)
			.saturating_add(Weight::from_parts(0, 6824))
			// Standard Error: 2_663
			.saturating_add(Weight::from_parts(4_833_099, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3134).saturating_mul(c.into()))
	}
	/// Storage: DID Did (r:1 w:0)
	/// Proof: DID Did (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// Storage: DID IssuedCredentials (r:50 w:50)
	/// Proof: DID IssuedCredentials (max_values: None, max_size: Some(659), added: 3134, mode: MaxEncodedLen)
	/// The range of component `c` is `[0, 50]`.
	fn revoke_credentials(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `365 + c * (594 ±0)`
		//  Estimated: `3907 + c * (3134 ±0)`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(13_183_278, 0)
			.saturating_add(Weight::from_parts(0, 3907))
			// Standard Error: 4_448
			.saturating_add(Weight::from_parts(5_919_849, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3134).saturating_mul(c.into()))
	}
	/// Storage: DID Issuers (r:1 w:1)
	/// Proof: DID Issuers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn add_issuer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3514`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3514))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: DID Issuers (r:1 w:1)
	/// Proof: DID Issuers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn revoke_issuer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `117`
		//  Estimated: `3514`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3514))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: DID Issuers (r:1 w:1)
	/// Proof: DID Issuers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn reactivate_issuer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `117`
		//  Estimated: `3514`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3514))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: DID CredentialsTypes (r:1 w:1)
	/// Proof: DID CredentialsTypes (max_values: Some(1), max_size: Some(1651), added: 2146, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 50]`.
	fn add_credentials_type(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3136`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(10_360_273, 0)
			.saturating_add(Weight::from_parts(0, 3136))
			// Standard Error: 1_583
			.saturating_add(Weight::from_parts(520_543, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: DID CredentialsTypes (r:1 w:1)
	/// Proof: DID CredentialsTypes (max_values: Some(1), max_size: Some(1651), added: 2146, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 50]`.
	fn remove_credentials_type(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `70 + m * (6 ±0)`
		//  Estimated: `3136`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_842_469, 0)
			.saturating_add(Weight::from_parts(0, 3136))
			// Standard Error: 1_519
			.saturating_add(Weight::from_parts(459_197, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
